{"ast":null,"code":"var _jsxFileName = \"H:\\\\streamlit_mindmap\\\\build\\\\SL_ReactFlow\\\\frontend\\\\src\\\\SL_ReactFlow.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport ReactFlow, { Controls, Background, MiniMap, applyEdgeChanges, applyNodeChanges, ConnectionMode, ControlButton } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport MultiPurposeNode from './MultiPurposeNode'; // Import the custom node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  multiPurposeNode: MultiPurposeNode\n};\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass SL_ReactFlow extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n    this.onNodeClick = (_, node) => {\n      this.setState({\n        selectedNodeId: node.id\n      });\n    };\n    this.onEdgeClick = (_, edge) => {\n      this.setState({\n        selectedEdgeId: edge.id\n      });\n    };\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      nodes: [],\n      edges: [],\n      lastNumClicks: 0,\n      selectedNodeId: null,\n      selectedEdgeId: null\n    };\n    this.addEdge = (sourceId, targetId) => {\n      const newEdge = {\n        id: `e-${this.state.edges.length + 1}`,\n        source: sourceId,\n        target: targetId\n        // Add additional properties as needed\n      };\n      this.setState(prevState => ({\n        edges: [...prevState.edges, newEdge]\n      }));\n    };\n    this.onConnect = params => {\n      this.setState(prevState => ({\n        edges: [...prevState.edges, {\n          id: `e${prevState.edges.length}`,\n          ...params\n        }]\n      }));\n    };\n    this.onNodesChange = changes => {\n      this.setState(state => ({\n        nodes: applyNodeChanges(changes, state.nodes) // Type assertion here\n      }));\n    };\n    this.onEdgesChange = changes => {\n      this.setState(state => ({\n        edges: applyEdgeChanges(changes, state.edges)\n      }));\n    };\n    this.deleteSelectedNode = () => {\n      this.setState(prevState => ({\n        nodes: prevState.nodes.filter(n => n.id !== this.state.selectedNodeId),\n        edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\n        selectedNodeId: null\n        // Reset selectedNodeId to null or handle as needed\n      }));\n    };\n    this.deleteSelectedEdge = () => {\n      if (!this.state.selectedEdgeId) return;\n      this.setState(prevState => ({\n        edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\n        selectedEdgeId: null // Reset selected edge ID\n      }));\n    };\n    this.deleteSelectedElement = () => {\n      if (this.state.selectedNodeId) {\n        this.setState(prevState => ({\n          nodes: prevState.nodes.filter(node => node.id !== prevState.selectedNodeId),\n          edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\n          selectedNodeId: null // Reset selected node ID\n        }));\n      } else if (this.state.selectedEdgeId) {\n        this.setState(prevState => ({\n          edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\n          selectedEdgeId: null // Reset selected edge ID\n        }));\n      }\n    };\n    this.clearCanvas = () => {\n      this.setState({\n        nodes: [],\n        edges: []\n      });\n    };\n    this.saveCanvas = () => {\n      Streamlit.setComponentValue({\n        nodes: this.state.nodes,\n        edges: this.state.edges\n      });\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n\n      const name = this.props.args[\"name\"];\n      const {\n        numClicks\n      } = this.props.args;\n      const {\n        lastNumClicks\n      } = this.state;\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      if (numClicks !== lastNumClicks) {\n        this.setState({\n          lastNumClicks: numClicks\n        }); // Update lastNumClicks in state\n        this.addNode(this.props.args[\"label\"] || `Node ${this.state.nodes.length + 1}`);\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 1000,\n          width: '100vw'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n          connectionMode: ConnectionMode.Loose,\n          nodeTypes: nodeTypes,\n          nodes: this.state.nodes,\n          edges: this.state.edges,\n          onNodesChange: this.onNodesChange,\n          onEdgesChange: this.onEdgesChange,\n          onNodeClick: this.onNodeClick,\n          onEdgeClick: this.onEdgeClick,\n          onConnect: this.onConnect,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n            nodeStrokeWidth: 3,\n            zoomable: true,\n            pannable: true,\n            position: \"bottom-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {\n            showInteractive: false,\n            children: [/*#__PURE__*/_jsxDEV(ControlButton, {\n              onClick: this.deleteSelectedElement,\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \" D \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 60\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(ControlButton, {\n              onClick: this.clearCanvas,\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \" W \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 50\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(ControlButton, {\n              onClick: this.saveCanvas,\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \" S \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this);\n    };\n    this.onConnect = this.onConnect.bind(this);\n    this.onNodeClick = this.onNodeClick.bind(this);\n    this.onEdgeClick = this.onEdgeClick.bind(this);\n    this.deleteSelectedNode = this.deleteSelectedNode.bind(this);\n    this.deleteSelectedEdge = this.deleteSelectedEdge.bind(this);\n    this.deleteSelectedElement = this.deleteSelectedElement.bind(this);\n  }\n  addNode(label) {\n    // Define a new node with the CustomNode structure\n    const newNode = {\n      id: `node-${this.state.nodes.length + 1}`,\n      // Assuming 'multiPurposeNode' is a valid type in your setup\n      type: 'multiPurposeNode',\n      position: {\n        x: Math.random() * 250,\n        y: Math.random() * 250\n      },\n      data: {\n        label\n      }\n    };\n\n    // Update the state in a type-safe manner\n    this.setState(prevState => ({\n      nodes: [...prevState.nodes, newNode]\n    }));\n  }\n}\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(SL_ReactFlow);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","ReactFlow","Controls","Background","MiniMap","applyEdgeChanges","applyNodeChanges","ConnectionMode","ControlButton","MultiPurposeNode","jsxDEV","_jsxDEV","nodeTypes","multiPurposeNode","SL_ReactFlow","constructor","props","onNodeClick","_","node","setState","selectedNodeId","id","onEdgeClick","edge","selectedEdgeId","state","numClicks","isFocused","nodes","edges","lastNumClicks","addEdge","sourceId","targetId","newEdge","length","source","target","prevState","onConnect","params","onNodesChange","changes","onEdgesChange","deleteSelectedNode","filter","n","e","deleteSelectedEdge","deleteSelectedElement","clearCanvas","saveCanvas","setComponentValue","render","name","args","theme","style","borderStyling","primaryColor","border","outline","addNode","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","connectionMode","Loose","fitView","nodeStrokeWidth","zoomable","pannable","position","showInteractive","onClick","bind","label","newNode","type","x","Math","random","y","data","_c","$RefreshReg$"],"sources":["H:/streamlit_mindmap/build/SL_ReactFlow/frontend/src/SL_ReactFlow.tsx"],"sourcesContent":["import {\r\n    Streamlit,\r\n    StreamlitComponentBase,\r\n    withStreamlitConnection,\r\n  } from \"streamlit-component-lib\"\r\n  import React, { ReactNode } from \"react\"\r\n  import ReactFlow, { Controls, Background ,MiniMap, Edge,applyEdgeChanges, applyNodeChanges,ConnectionMode,ControlButton} from 'reactflow';\r\n  import 'reactflow/dist/style.css';\r\n  import MultiPurposeNode from './MultiPurposeNode'; // Import the custom node\r\n  \r\n  \r\n  const nodeTypes = { multiPurposeNode: MultiPurposeNode };\r\n  interface NodeData {\r\n    label: string;\r\n  }\r\n  interface MultiPurposeNode {\r\n    id: string;\r\n    type: 'multiPurposeNode'; // Specify the type explicitly if you have a finite set of node types.\r\n    position: { x: number; y: number };\r\n    data: NodeData;\r\n  }\r\n  \r\n  interface State {\r\n    numClicks: number;\r\n    isFocused: boolean;\r\n    nodes: MultiPurposeNode[]; // Adding nodes to the state\r\n    edges: Edge[]; // Adding edges to the state  \r\n    lastNumClicks : number;\r\n    selectedNodeId: string | null; // Track the selected node\r\n    selectedEdgeId: string | null; // Track the selected edge\r\n  }\r\n  \r\n  \r\n  \r\n  /**\r\n   * This is a React-based component template. The `render()` function is called\r\n   * automatically when your component should be re-rendered.\r\n   */\r\n  class SL_ReactFlow extends StreamlitComponentBase<State> {\r\n  \r\n    constructor(props: any) {\r\n      super(props);\r\n      this.onConnect = this.onConnect.bind(this);\r\n      this.onNodeClick = this.onNodeClick.bind(this);\r\n      this.onEdgeClick = this.onEdgeClick.bind(this);\r\n      this.deleteSelectedNode = this.deleteSelectedNode.bind(this);\r\n      this.deleteSelectedEdge = this.deleteSelectedEdge.bind(this);\r\n      this.deleteSelectedElement = this.deleteSelectedElement.bind(this);\r\n  \r\n    }\r\n    onNodeClick = (_:React.MouseEvent, node:any) => {\r\n      this.setState({ selectedNodeId: node.id });\r\n    }\r\n    onEdgeClick = (_:React.MouseEvent, edge:Edge) => {\r\n      this.setState({ selectedEdgeId: edge.id });\r\n    }\r\n    public state : State = { numClicks: 0, \r\n                  isFocused: false,\r\n                  nodes: [],\r\n                  edges: [],\r\n                  lastNumClicks: 0,\r\n                  selectedNodeId: null,\r\n                  selectedEdgeId: null,\r\n                }; \r\n    addNode(label: string) {\r\n                  // Define a new node with the CustomNode structure\r\n                  const newNode: MultiPurposeNode = {\r\n                    id: `node-${this.state.nodes.length + 1}`,\r\n                    // Assuming 'multiPurposeNode' is a valid type in your setup\r\n                    type: 'multiPurposeNode',\r\n                    position: { x: Math.random() * 250, y: Math.random() * 250   },\r\n                    data: { label },\r\n                  };\r\n                \r\n                  // Update the state in a type-safe manner\r\n                  this.setState(prevState => ({\r\n                    nodes: [...prevState.nodes, newNode],\r\n                  }));\r\n                  \r\n                }\r\n                \r\n    addEdge = (sourceId: string, targetId: string) => {\r\n                  const newEdge: Edge = {\r\n                    id: `e-${this.state.edges.length + 1}`,\r\n                    source: sourceId,\r\n                    target: targetId,\r\n                    // Add additional properties as needed\r\n                  };\r\n                \r\n                  this.setState(prevState => ({\r\n                    edges: [...prevState.edges, newEdge],\r\n                  }));\r\n                }\r\n    onConnect = (params:any) => {\r\n                  this.setState(prevState => ({\r\n                    edges: [...prevState.edges, { id: `e${prevState.edges.length}`, ...params }],\r\n                  }));\r\n                }\r\n                     \r\n    onNodesChange = (changes:any) => {\r\n                  this.setState((state) => ({\r\n                    nodes: applyNodeChanges(changes, state.nodes) as MultiPurposeNode[], // Type assertion here\r\n                  }));\r\n      \r\n                }\r\n    onEdgesChange = (changes:any) => {\r\n                  this.setState((state) => ({\r\n                    edges: applyEdgeChanges(changes, state.edges),\r\n                  }));\r\n                }\r\n    deleteSelectedNode = () => {\r\n                  this.setState(prevState => ({\r\n                    nodes: prevState.nodes.filter(n => n.id !== this.state.selectedNodeId),\r\n                    edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\r\n                    selectedNodeId: null,\r\n                    // Reset selectedNodeId to null or handle as needed\r\n                  }));\r\n                }\r\n    deleteSelectedEdge = () => {\r\n                  if (!this.state.selectedEdgeId) return;\r\n                \r\n                  this.setState(prevState => ({\r\n                    edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\r\n                    selectedEdgeId: null, // Reset selected edge ID\r\n                  }));\r\n                }\r\n                \r\n    deleteSelectedElement = () => {\r\n                  if (this.state.selectedNodeId) {\r\n                    this.setState(prevState => ({\r\n                      nodes: prevState.nodes.filter(node => node.id !== prevState.selectedNodeId),\r\n                      edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\r\n                      selectedNodeId: null, // Reset selected node ID\r\n                    }));\r\n                  } else if (this.state.selectedEdgeId) {\r\n                    this.setState(prevState => ({\r\n                      edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\r\n                      selectedEdgeId: null, // Reset selected edge ID\r\n                    }));\r\n                  }\r\n                }\r\n    clearCanvas = () => {\r\n                  this.setState({ nodes: [], edges: [] });\r\n                }\r\n    saveCanvas = () => {\r\n        Streamlit.setComponentValue({ nodes: this.state.nodes, edges: this.state.edges });\r\n\r\n                }        \r\n    public render = (): ReactNode => {\r\n      // Arguments that are passed to the plugin in Python are accessible\r\n      // via `this.props.args`. Here, we access the \"name\" arg.\r\n      \r\n      const name = this.props.args[\"name\"]\r\n      const { numClicks } = this.props.args;\r\n      const { lastNumClicks } = this.state;\r\n      \r\n  \r\n  \r\n      // Streamlit sends us a theme object via props that we can use to ensure\r\n      // that our component has visuals that match the active theme in a\r\n      // streamlit app.\r\n      const { theme } = this.props\r\n      const style: React.CSSProperties = {}\r\n      \r\n  \r\n      // Maintain compatibility with older versions of Streamlit that don't send\r\n      // a theme object.\r\n      if (theme) {\r\n        // Use the theme object to style our button border. Alternatively, the\r\n        // theme style is defined in CSS vars.\r\n        const borderStyling = `1px solid ${\r\n          this.state.isFocused ? theme.primaryColor : \"gray\"\r\n        }`\r\n        style.border = borderStyling\r\n        style.outline = borderStyling\r\n      }\r\n      if (numClicks !== lastNumClicks) {\r\n        this.setState({ lastNumClicks: numClicks }); // Update lastNumClicks in state\r\n        this.addNode(this.props.args[\"label\"] || `Node ${this.state.nodes.length + 1}`);\r\n      }\r\n      \r\n      // Show a button and some text.\r\n      // When the button is clicked, we'll increment our \"numClicks\" state\r\n      // variable, and send its new value back to Streamlit, where it'll\r\n      // be available to the Python program.\r\n      \r\n      return (\r\n        <div style={{ height: 1000 ,width : '100vw'}}>\r\n          <h3> {name} </h3>\r\n        <ReactFlow \r\n        connectionMode={ConnectionMode.Loose}\r\n        nodeTypes={nodeTypes}\r\n        nodes={this.state.nodes}\r\n        edges={this.state.edges}\r\n        onNodesChange={this.onNodesChange}\r\n        onEdgesChange={this.onEdgesChange}\r\n        onNodeClick={this.onNodeClick}\r\n        onEdgeClick={this.onEdgeClick}\r\n        onConnect={this.onConnect}\r\n        \r\n        fitView>\r\n         <MiniMap nodeStrokeWidth={3} zoomable pannable  position = \"bottom-right\"/>\r\n          <Background />\r\n          <Controls showInteractive={false}>\r\n      <ControlButton onClick={this.deleteSelectedElement}> <strong> D </strong>\r\n      </ControlButton>\r\n      <ControlButton onClick={this.clearCanvas}> <strong> W </strong>\r\n      </ControlButton>\r\n      <ControlButton onClick={this.saveCanvas}> <strong> S </strong>\r\n      </ControlButton>\r\n    </Controls>\r\n        </ReactFlow>\r\n      </div>\r\n  \r\n      )\r\n    }\r\n  \r\n  }\r\n  // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n  // connection between your component and the Streamlit app, and handles\r\n  // passing arguments from Python -> Component.\r\n  //\r\n  // You don't need to edit withStreamlitConnection (but you're welcome to!).\r\n  export default withStreamlitConnection(SL_ReactFlow)"],"mappings":";AAAA,SACIA,SAAS,EACTC,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AACxC,OAAOC,SAAS,IAAIC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAOC,gBAAgB,EAAEC,gBAAgB,EAACC,cAAc,EAACC,aAAa,QAAO,WAAW;AACzI,OAAO,0BAA0B;AACjC,OAAOC,gBAAgB,MAAM,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGnD,MAAMC,SAAS,GAAG;EAAEC,gBAAgB,EAAEJ;AAAiB,CAAC;AAuBxD;AACF;AACA;AACA;AACE,MAAMK,YAAY,SAAShB,sBAAsB,CAAQ;EAEvDiB,WAAWA,CAACC,KAAU,EAAE;IACtB,KAAK,CAACA,KAAK,CAAC;IAAC,KASfC,WAAW,GAAG,CAACC,CAAkB,EAAEC,IAAQ,KAAK;MAC9C,IAAI,CAACC,QAAQ,CAAC;QAAEC,cAAc,EAAEF,IAAI,CAACG;MAAG,CAAC,CAAC;IAC5C,CAAC;IAAA,KACDC,WAAW,GAAG,CAACL,CAAkB,EAAEM,IAAS,KAAK;MAC/C,IAAI,CAACJ,QAAQ,CAAC;QAAEK,cAAc,EAAED,IAAI,CAACF;MAAG,CAAC,CAAC;IAC5C,CAAC;IAAA,KACMI,KAAK,GAAW;MAAEC,SAAS,EAAE,CAAC;MACvBC,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,aAAa,EAAE,CAAC;MAChBV,cAAc,EAAE,IAAI;MACpBI,cAAc,EAAE;IAClB,CAAC;IAAA,KAkBbO,OAAO,GAAG,CAACC,QAAgB,EAAEC,QAAgB,KAAK;MACpC,MAAMC,OAAa,GAAG;QACpBb,EAAE,EAAG,KAAI,IAAI,CAACI,KAAK,CAACI,KAAK,CAACM,MAAM,GAAG,CAAE,EAAC;QACtCC,MAAM,EAAEJ,QAAQ;QAChBK,MAAM,EAAEJ;QACR;MACF,CAAC;MAED,IAAI,CAACd,QAAQ,CAACmB,SAAS,KAAK;QAC1BT,KAAK,EAAE,CAAC,GAAGS,SAAS,CAACT,KAAK,EAAEK,OAAO;MACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAAA,KACbK,SAAS,GAAIC,MAAU,IAAK;MACd,IAAI,CAACrB,QAAQ,CAACmB,SAAS,KAAK;QAC1BT,KAAK,EAAE,CAAC,GAAGS,SAAS,CAACT,KAAK,EAAE;UAAER,EAAE,EAAG,IAAGiB,SAAS,CAACT,KAAK,CAACM,MAAO,EAAC;UAAE,GAAGK;QAAO,CAAC;MAC7E,CAAC,CAAC,CAAC;IACL,CAAC;IAAA,KAEbC,aAAa,GAAIC,OAAW,IAAK;MACnB,IAAI,CAACvB,QAAQ,CAAEM,KAAK,KAAM;QACxBG,KAAK,EAAEvB,gBAAgB,CAACqC,OAAO,EAAEjB,KAAK,CAACG,KAAK,CAAuB,CAAE;MACvE,CAAC,CAAC,CAAC;IAEL,CAAC;IAAA,KACbe,aAAa,GAAID,OAAW,IAAK;MACnB,IAAI,CAACvB,QAAQ,CAAEM,KAAK,KAAM;QACxBI,KAAK,EAAEzB,gBAAgB,CAACsC,OAAO,EAAEjB,KAAK,CAACI,KAAK;MAC9C,CAAC,CAAC,CAAC;IACL,CAAC;IAAA,KACbe,kBAAkB,GAAG,MAAM;MACb,IAAI,CAACzB,QAAQ,CAACmB,SAAS,KAAK;QAC1BV,KAAK,EAAEU,SAAS,CAACV,KAAK,CAACiB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACzB,EAAE,KAAK,IAAI,CAACI,KAAK,CAACL,cAAc,CAAC;QACtES,KAAK,EAAES,SAAS,CAACT,KAAK,CAACgB,MAAM,CAACE,CAAC,IAAIA,CAAC,CAACX,MAAM,KAAK,IAAI,CAACX,KAAK,CAACL,cAAc,IAAI2B,CAAC,CAACV,MAAM,KAAK,IAAI,CAACZ,KAAK,CAACL,cAAc,CAAC;QACpHA,cAAc,EAAE;QAChB;MACF,CAAC,CAAC,CAAC;IACL,CAAC;IAAA,KACb4B,kBAAkB,GAAG,MAAM;MACb,IAAI,CAAC,IAAI,CAACvB,KAAK,CAACD,cAAc,EAAE;MAEhC,IAAI,CAACL,QAAQ,CAACmB,SAAS,KAAK;QAC1BT,KAAK,EAAES,SAAS,CAACT,KAAK,CAACgB,MAAM,CAACtB,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKiB,SAAS,CAACd,cAAc,CAAC;QAC3EA,cAAc,EAAE,IAAI,CAAE;MACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAAA,KAEbyB,qBAAqB,GAAG,MAAM;MAChB,IAAI,IAAI,CAACxB,KAAK,CAACL,cAAc,EAAE;QAC7B,IAAI,CAACD,QAAQ,CAACmB,SAAS,KAAK;UAC1BV,KAAK,EAAEU,SAAS,CAACV,KAAK,CAACiB,MAAM,CAAC3B,IAAI,IAAIA,IAAI,CAACG,EAAE,KAAKiB,SAAS,CAAClB,cAAc,CAAC;UAC3ES,KAAK,EAAES,SAAS,CAACT,KAAK,CAACgB,MAAM,CAACE,CAAC,IAAIA,CAAC,CAACX,MAAM,KAAK,IAAI,CAACX,KAAK,CAACL,cAAc,IAAI2B,CAAC,CAACV,MAAM,KAAK,IAAI,CAACZ,KAAK,CAACL,cAAc,CAAC;UACpHA,cAAc,EAAE,IAAI,CAAE;QACxB,CAAC,CAAC,CAAC;MACL,CAAC,MAAM,IAAI,IAAI,CAACK,KAAK,CAACD,cAAc,EAAE;QACpC,IAAI,CAACL,QAAQ,CAACmB,SAAS,KAAK;UAC1BT,KAAK,EAAES,SAAS,CAACT,KAAK,CAACgB,MAAM,CAACtB,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKiB,SAAS,CAACd,cAAc,CAAC;UAC3EA,cAAc,EAAE,IAAI,CAAE;QACxB,CAAC,CAAC,CAAC;MACL;IACF,CAAC;IAAA,KACb0B,WAAW,GAAG,MAAM;MACN,IAAI,CAAC/B,QAAQ,CAAC;QAAES,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;IACzC,CAAC;IAAA,KACbsB,UAAU,GAAG,MAAM;MACfvD,SAAS,CAACwD,iBAAiB,CAAC;QAAExB,KAAK,EAAE,IAAI,CAACH,KAAK,CAACG,KAAK;QAAEC,KAAK,EAAE,IAAI,CAACJ,KAAK,CAACI;MAAM,CAAC,CAAC;IAEzE,CAAC;IAAA,KACNwB,MAAM,GAAG,MAAiB;MAC/B;MACA;;MAEA,MAAMC,IAAI,GAAG,IAAI,CAACvC,KAAK,CAACwC,IAAI,CAAC,MAAM,CAAC;MACpC,MAAM;QAAE7B;MAAU,CAAC,GAAG,IAAI,CAACX,KAAK,CAACwC,IAAI;MACrC,MAAM;QAAEzB;MAAc,CAAC,GAAG,IAAI,CAACL,KAAK;;MAIpC;MACA;MACA;MACA,MAAM;QAAE+B;MAAM,CAAC,GAAG,IAAI,CAACzC,KAAK;MAC5B,MAAM0C,KAA0B,GAAG,CAAC,CAAC;;MAGrC;MACA;MACA,IAAID,KAAK,EAAE;QACT;QACA;QACA,MAAME,aAAa,GAAI,aACrB,IAAI,CAACjC,KAAK,CAACE,SAAS,GAAG6B,KAAK,CAACG,YAAY,GAAG,MAC7C,EAAC;QACFF,KAAK,CAACG,MAAM,GAAGF,aAAa;QAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;MAC/B;MACA,IAAIhC,SAAS,KAAKI,aAAa,EAAE;QAC/B,IAAI,CAACX,QAAQ,CAAC;UAAEW,aAAa,EAAEJ;QAAU,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACoC,OAAO,CAAC,IAAI,CAAC/C,KAAK,CAACwC,IAAI,CAAC,OAAO,CAAC,IAAK,QAAO,IAAI,CAAC9B,KAAK,CAACG,KAAK,CAACO,MAAM,GAAG,CAAE,EAAC,CAAC;MACjF;;MAEA;MACA;MACA;MACA;;MAEA,oBACEzB,OAAA;QAAK+C,KAAK,EAAE;UAAEM,MAAM,EAAE,IAAI;UAAEC,KAAK,EAAG;QAAO,CAAE;QAAAC,QAAA,gBAC3CvD,OAAA;UAAAuD,QAAA,GAAI,GAAC,EAACX,IAAI,EAAC,GAAC;QAAA;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnB3D,OAAA,CAACV,SAAS;UACVsE,cAAc,EAAEhE,cAAc,CAACiE,KAAM;UACrC5D,SAAS,EAAEA,SAAU;UACrBiB,KAAK,EAAE,IAAI,CAACH,KAAK,CAACG,KAAM;UACxBC,KAAK,EAAE,IAAI,CAACJ,KAAK,CAACI,KAAM;UACxBY,aAAa,EAAE,IAAI,CAACA,aAAc;UAClCE,aAAa,EAAE,IAAI,CAACA,aAAc;UAClC3B,WAAW,EAAE,IAAI,CAACA,WAAY;UAC9BM,WAAW,EAAE,IAAI,CAACA,WAAY;UAC9BiB,SAAS,EAAE,IAAI,CAACA,SAAU;UAE1BiC,OAAO;UAAAP,QAAA,gBACNvD,OAAA,CAACP,OAAO;YAACsE,eAAe,EAAE,CAAE;YAACC,QAAQ;YAACC,QAAQ;YAAEC,QAAQ,EAAG;UAAc;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eAC1E3D,OAAA,CAACR,UAAU;YAAAgE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACd3D,OAAA,CAACT,QAAQ;YAAC4E,eAAe,EAAE,KAAM;YAAAZ,QAAA,gBACrCvD,OAAA,CAACH,aAAa;cAACuE,OAAO,EAAE,IAAI,CAAC7B,qBAAsB;cAAAgB,QAAA,GAAC,GAAC,eAAAvD,OAAA;gBAAAuD,QAAA,EAAQ;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1D,CAAC,eAChB3D,OAAA,CAACH,aAAa;cAACuE,OAAO,EAAE,IAAI,CAAC5B,WAAY;cAAAe,QAAA,GAAC,GAAC,eAAAvD,OAAA;gBAAAuD,QAAA,EAAQ;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC,eAChB3D,OAAA,CAACH,aAAa;cAACuE,OAAO,EAAE,IAAI,CAAC3B,UAAW;cAAAc,QAAA,GAAC,GAAC,eAAAvD,OAAA;gBAAAuD,QAAA,EAAQ;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/C,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAGR,CAAC;IA7KC,IAAI,CAAC9B,SAAS,GAAG,IAAI,CAACA,SAAS,CAACwC,IAAI,CAAC,IAAI,CAAC;IAC1C,IAAI,CAAC/D,WAAW,GAAG,IAAI,CAACA,WAAW,CAAC+D,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACzD,WAAW,GAAG,IAAI,CAACA,WAAW,CAACyD,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACnC,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACmC,IAAI,CAAC,IAAI,CAAC;IAC5D,IAAI,CAAC/B,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAAC+B,IAAI,CAAC,IAAI,CAAC;IAC5D,IAAI,CAAC9B,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,CAAC8B,IAAI,CAAC,IAAI,CAAC;EAEpE;EAeAjB,OAAOA,CAACkB,KAAa,EAAE;IACT;IACA,MAAMC,OAAyB,GAAG;MAChC5D,EAAE,EAAG,QAAO,IAAI,CAACI,KAAK,CAACG,KAAK,CAACO,MAAM,GAAG,CAAE,EAAC;MACzC;MACA+C,IAAI,EAAE,kBAAkB;MACxBN,QAAQ,EAAE;QAAEO,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAAEC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;MAAM,CAAC;MAC9DE,IAAI,EAAE;QAAEP;MAAM;IAChB,CAAC;;IAED;IACA,IAAI,CAAC7D,QAAQ,CAACmB,SAAS,KAAK;MAC1BV,KAAK,EAAE,CAAC,GAAGU,SAAS,CAACV,KAAK,EAAEqD,OAAO;IACrC,CAAC,CAAC,CAAC;EAEL;AA0Id;AACA;AACA;AACA;AACA;AACA;AACA,eAAAO,EAAA,GAAe1F,uBAAuB,CAACe,YAAY,CAAC;AAAA,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}