{"ast":null,"code":"var _jsxFileName = \"h:\\\\streamlit_mindmap\\\\component-template\\\\template\\\\my_component\\\\frontend\\\\src\\\\SL_ReactFlow.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport ReactFlow, { Controls, Background, MiniMap, applyEdgeChanges, applyNodeChanges, ConnectionMode, ControlButton } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport MultiPurposeNode from './MultiPurposeNode'; // Import the custom node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  multiPurposeNode: MultiPurposeNode\n};\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass SL_ReactFlow extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n    this.onNodeClick = (_, node) => {\n      this.setState({\n        selectedNodeId: node.id\n      });\n    };\n    this.onEdgeClick = (_, edge) => {\n      this.setState({\n        selectedEdgeId: edge.id\n      });\n    };\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      nodes: [\n      // Initialize with a default node or leave empty if not needed\n      {\n        id: '1',\n        type: 'multiPurposeNode',\n        position: {\n          x: 250,\n          y: 5\n        },\n        data: {\n          label: 'Node 1'\n        }\n      }],\n      edges: [],\n      lastNumClicks: 0,\n      selectedNodeId: null,\n      selectedEdgeId: null\n    };\n    this.addEdge = (sourceId, targetId) => {\n      const newEdge = {\n        id: `e-${this.state.edges.length + 1}`,\n        source: sourceId,\n        target: targetId\n        // Add additional properties as needed\n      };\n      this.setState(prevState => ({\n        edges: [...prevState.edges, newEdge]\n      }));\n    };\n    this.onConnect = params => {\n      const newEdge = {\n        id: `e-${this.state.edges.length}`,\n        source: params.source,\n        target: params.target,\n        // Optionally, include sourceHandle and targetHandle if using handles\n        sourceHandle: params.sourceHandle.id,\n        targetHandle: params.targetHandle.id\n      };\n      this.setState(prevState => ({\n        edges: [...prevState.edges, {\n          id: `e${prevState.edges.length}`,\n          ...params\n        }]\n      }));\n    };\n    this.onNodesChange = changes => {\n      this.setState(state => ({\n        nodes: applyNodeChanges(changes, state.nodes) // Type assertion here\n      }));\n    };\n    this.onEdgesChange = changes => {\n      this.setState(state => ({\n        edges: applyEdgeChanges(changes, state.edges)\n      }));\n    };\n    this.deleteSelectedNode = () => {\n      this.setState(prevState => ({\n        nodes: prevState.nodes.filter(n => n.id !== this.state.selectedNodeId),\n        edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\n        selectedNodeId: null\n        // Reset selectedNodeId to null or handle as needed\n      }));\n    };\n    this.deleteSelectedEdge = () => {\n      if (!this.state.selectedEdgeId) return;\n      this.setState(prevState => ({\n        edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\n        selectedEdgeId: null // Reset selected edge ID\n      }));\n    };\n    this.deleteSelectedElement = () => {\n      if (this.state.selectedNodeId) {\n        this.setState(prevState => ({\n          nodes: prevState.nodes.filter(node => node.id !== prevState.selectedNodeId),\n          edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\n          selectedNodeId: null // Reset selected node ID\n        }));\n      } else if (this.state.selectedEdgeId) {\n        this.setState(prevState => ({\n          edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\n          selectedEdgeId: null // Reset selected edge ID\n        }));\n      }\n    };\n    this.clearCanvas = () => {\n      this.setState({\n        nodes: [],\n        edges: []\n      });\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n\n      const name = this.props.args[\"name\"];\n      const {\n        numClicks\n      } = this.props.args;\n      const {\n        lastNumClicks\n      } = this.state;\n      const flowStyles = {\n        \"width\": '100%',\n        \"height\": 500\n      };\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      if (numClicks !== lastNumClicks) {\n        this.setState({\n          lastNumClicks: numClicks\n        }); // Update lastNumClicks in state\n        this.addNode(this.props.args[\"label\"] || `Node ${this.state.nodes.length + 1}`);\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 1000,\n          width: '100vw'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n          connectionMode: ConnectionMode.Loose,\n          nodeTypes: nodeTypes,\n          nodes: this.state.nodes,\n          edges: this.state.edges,\n          onNodesChange: this.onNodesChange,\n          onEdgesChange: this.onEdgesChange,\n          onNodeClick: this.onNodeClick,\n          onEdgeClick: this.onEdgeClick,\n          onConnect: this.onConnect,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n            nodeStrokeWidth: 3,\n            zoomable: true,\n            pannable: true,\n            position: \"bottom-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {\n            showInteractive: false,\n            children: [/*#__PURE__*/_jsxDEV(ControlButton, {\n              onClick: this.deleteSelectedElement,\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \" D \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 60\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(ControlButton, {\n              onClick: this.clearCanvas,\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \" W \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 50\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this);\n    };\n    this.onConnect = this.onConnect.bind(this);\n    this.onNodeClick = this.onNodeClick.bind(this);\n    this.onEdgeClick = this.onEdgeClick.bind(this);\n    this.deleteSelectedNode = this.deleteSelectedNode.bind(this);\n    this.deleteSelectedEdge = this.deleteSelectedEdge.bind(this);\n    this.deleteSelectedElement = this.deleteSelectedElement.bind(this);\n  }\n  addNode(label) {\n    console.log('Adding node with label:', label);\n    // Define a new node with the CustomNode structure\n    const newNode = {\n      id: `node-${this.state.nodes.length + 1}`,\n      // Assuming 'multiPurposeNode' is a valid type in your setup\n      type: 'multiPurposeNode',\n      position: {\n        x: Math.random() * 250,\n        y: Math.random() * 250\n      },\n      data: {\n        label\n      }\n    };\n\n    // Update the state in a type-safe manner\n    this.setState(prevState => ({\n      nodes: [...prevState.nodes, newNode]\n    }));\n  }\n}\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(SL_ReactFlow);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","ReactFlow","Controls","Background","MiniMap","applyEdgeChanges","applyNodeChanges","ConnectionMode","ControlButton","MultiPurposeNode","jsxDEV","_jsxDEV","nodeTypes","multiPurposeNode","SL_ReactFlow","constructor","props","onNodeClick","_","node","setState","selectedNodeId","id","onEdgeClick","edge","selectedEdgeId","state","numClicks","isFocused","nodes","type","position","x","y","data","label","edges","lastNumClicks","addEdge","sourceId","targetId","newEdge","length","source","target","prevState","onConnect","params","sourceHandle","targetHandle","onNodesChange","changes","onEdgesChange","deleteSelectedNode","filter","n","e","deleteSelectedEdge","deleteSelectedElement","clearCanvas","render","name","args","flowStyles","theme","style","borderStyling","primaryColor","border","outline","addNode","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","connectionMode","Loose","fitView","nodeStrokeWidth","zoomable","pannable","showInteractive","onClick","bind","console","log","newNode","Math","random","_c","$RefreshReg$"],"sources":["h:/streamlit_mindmap/component-template/template/my_component/frontend/src/SL_ReactFlow.tsx"],"sourcesContent":["import {\r\n    Streamlit,\r\n    StreamlitComponentBase,\r\n    withStreamlitConnection,\r\n  } from \"streamlit-component-lib\"\r\n  import React, { ReactNode ,useState,useCallback,useMemo} from \"react\"\r\n  import ReactFlow, { Controls, Background ,MiniMap, Edge,applyEdgeChanges, applyNodeChanges,ConnectionMode,ControlButton, Panel} from 'reactflow';\r\n  import 'reactflow/dist/style.css';\r\n  import MultiPurposeNode from './MultiPurposeNode'; // Import the custom node\r\n  \r\n  \r\n  const nodeTypes = { multiPurposeNode: MultiPurposeNode };\r\n  interface NodeData {\r\n    label: string;\r\n  }\r\n  interface MultiPurposeNode {\r\n    id: string;\r\n    type: 'multiPurposeNode'; // Specify the type explicitly if you have a finite set of node types.\r\n    position: { x: number; y: number };\r\n    data: NodeData;\r\n  }\r\n  \r\n  interface State {\r\n    numClicks: number;\r\n    isFocused: boolean;\r\n    nodes: MultiPurposeNode[]; // Adding nodes to the state\r\n    edges: Edge[]; // Adding edges to the state  \r\n    lastNumClicks : number;\r\n    selectedNodeId: string | null; // Track the selected node\r\n    selectedEdgeId: string | null; // Track the selected edge\r\n  }\r\n  \r\n  \r\n  \r\n  /**\r\n   * This is a React-based component template. The `render()` function is called\r\n   * automatically when your component should be re-rendered.\r\n   */\r\n  class SL_ReactFlow extends StreamlitComponentBase<State> {\r\n  \r\n    constructor(props: any) {\r\n      super(props);\r\n      this.onConnect = this.onConnect.bind(this);\r\n      this.onNodeClick = this.onNodeClick.bind(this);\r\n      this.onEdgeClick = this.onEdgeClick.bind(this);\r\n      this.deleteSelectedNode = this.deleteSelectedNode.bind(this);\r\n      this.deleteSelectedEdge = this.deleteSelectedEdge.bind(this);\r\n      this.deleteSelectedElement = this.deleteSelectedElement.bind(this);\r\n  \r\n    }\r\n    onNodeClick = (_:React.MouseEvent, node:any) => {\r\n      this.setState({ selectedNodeId: node.id });\r\n    }\r\n    onEdgeClick = (_:React.MouseEvent, edge:Edge) => {\r\n      this.setState({ selectedEdgeId: edge.id });\r\n    }\r\n    public state : State = { numClicks: 0, \r\n                  isFocused: false,\r\n                  nodes: [\r\n                    // Initialize with a default node or leave empty if not needed\r\n                    {\r\n                      id: '1',\r\n                      type: 'multiPurposeNode',\r\n                      position: { x: 250, y: 5 },\r\n                      data: { label: 'Node 1' },\r\n                    },\r\n                    \r\n                  ],\r\n                  edges: [],\r\n                  lastNumClicks: 0,\r\n                  selectedNodeId: null,\r\n                  selectedEdgeId: null,\r\n                }; \r\n    addNode(label: string) {\r\n        console.log('Adding node with label:', label);\r\n                  // Define a new node with the CustomNode structure\r\n                  const newNode: MultiPurposeNode = {\r\n                    id: `node-${this.state.nodes.length + 1}`,\r\n                    // Assuming 'multiPurposeNode' is a valid type in your setup\r\n                    type: 'multiPurposeNode',\r\n                    position: { x: Math.random() * 250, y: Math.random() * 250   },\r\n                    data: { label },\r\n                  };\r\n                \r\n                  // Update the state in a type-safe manner\r\n                  this.setState(prevState => ({\r\n                    nodes: [...prevState.nodes, newNode],\r\n                  }));\r\n                }\r\n                \r\n    addEdge = (sourceId: string, targetId: string) => {\r\n                  const newEdge: Edge = {\r\n                    id: `e-${this.state.edges.length + 1}`,\r\n                    source: sourceId,\r\n                    target: targetId,\r\n                    // Add additional properties as needed\r\n                  };\r\n                \r\n                  this.setState(prevState => ({\r\n                    edges: [...prevState.edges, newEdge],\r\n                  }));\r\n                }\r\n    onConnect = (params:any) => {\r\n      \r\n                  const newEdge = {\r\n                    id: `e-${this.state.edges.length}`,\r\n                    source: params.source,\r\n                    target: params.target,\r\n                    // Optionally, include sourceHandle and targetHandle if using handles\r\n                    sourceHandle: params.sourceHandle.id,\r\n                    targetHandle: params.targetHandle.id,\r\n                  };\r\n                \r\n                  this.setState(prevState => ({\r\n                    edges: [...prevState.edges, { id: `e${prevState.edges.length}`, ...params }],\r\n                  }));\r\n                }\r\n                     \r\n    onNodesChange = (changes:any) => {\r\n                  this.setState((state) => ({\r\n                    nodes: applyNodeChanges(changes, state.nodes) as MultiPurposeNode[], // Type assertion here\r\n                  }));\r\n      \r\n                }\r\n    onEdgesChange = (changes:any) => {\r\n                  this.setState((state) => ({\r\n                    edges: applyEdgeChanges(changes, state.edges),\r\n                  }));\r\n                }\r\n    deleteSelectedNode = () => {\r\n                  this.setState(prevState => ({\r\n                    nodes: prevState.nodes.filter(n => n.id !== this.state.selectedNodeId),\r\n                    edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\r\n                    selectedNodeId: null,\r\n                    // Reset selectedNodeId to null or handle as needed\r\n                  }));\r\n                }\r\n    deleteSelectedEdge = () => {\r\n                  if (!this.state.selectedEdgeId) return;\r\n                \r\n                  this.setState(prevState => ({\r\n                    edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\r\n                    selectedEdgeId: null, // Reset selected edge ID\r\n                  }));\r\n                }\r\n                \r\n    deleteSelectedElement = () => {\r\n                  if (this.state.selectedNodeId) {\r\n                    this.setState(prevState => ({\r\n                      nodes: prevState.nodes.filter(node => node.id !== prevState.selectedNodeId),\r\n                      edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\r\n                      selectedNodeId: null, // Reset selected node ID\r\n                    }));\r\n                  } else if (this.state.selectedEdgeId) {\r\n                    this.setState(prevState => ({\r\n                      edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\r\n                      selectedEdgeId: null, // Reset selected edge ID\r\n                    }));\r\n                  }\r\n                }\r\n      clearCanvas = () => {\r\n                  this.setState({ nodes: [], edges: [] });\r\n                }\r\n                \r\n    public render = (): ReactNode => {\r\n      // Arguments that are passed to the plugin in Python are accessible\r\n      // via `this.props.args`. Here, we access the \"name\" arg.\r\n      \r\n      const name = this.props.args[\"name\"]\r\n      const { numClicks } = this.props.args;\r\n      const { lastNumClicks } = this.state;\r\n      const flowStyles = {\"width\": '100%', \"height\": 500}\r\n      \r\n  \r\n  \r\n      // Streamlit sends us a theme object via props that we can use to ensure\r\n      // that our component has visuals that match the active theme in a\r\n      // streamlit app.\r\n      const { theme } = this.props\r\n      const style: React.CSSProperties = {}\r\n      \r\n  \r\n      // Maintain compatibility with older versions of Streamlit that don't send\r\n      // a theme object.\r\n      if (theme) {\r\n        // Use the theme object to style our button border. Alternatively, the\r\n        // theme style is defined in CSS vars.\r\n        const borderStyling = `1px solid ${\r\n          this.state.isFocused ? theme.primaryColor : \"gray\"\r\n        }`\r\n        style.border = borderStyling\r\n        style.outline = borderStyling\r\n      }\r\n      if (numClicks !== lastNumClicks) {\r\n        this.setState({ lastNumClicks: numClicks }); // Update lastNumClicks in state\r\n        this.addNode(this.props.args[\"label\"] || `Node ${this.state.nodes.length + 1}`);\r\n      }\r\n      \r\n      // Show a button and some text.\r\n      // When the button is clicked, we'll increment our \"numClicks\" state\r\n      // variable, and send its new value back to Streamlit, where it'll\r\n      // be available to the Python program.\r\n      \r\n      return (\r\n        <div style={{ height: 1000 ,width : '100vw'}}>\r\n          <h3> {name} </h3>\r\n        <ReactFlow \r\n        connectionMode={ConnectionMode.Loose}\r\n        nodeTypes={nodeTypes}\r\n        nodes={this.state.nodes}\r\n        edges={this.state.edges}\r\n        onNodesChange={this.onNodesChange}\r\n        onEdgesChange={this.onEdgesChange}\r\n        onNodeClick={this.onNodeClick}\r\n        onEdgeClick={this.onEdgeClick}\r\n        onConnect={this.onConnect}\r\n        \r\n        fitView>\r\n         <MiniMap nodeStrokeWidth={3} zoomable pannable  position = \"bottom-right\"/>\r\n          <Background />\r\n          <Controls showInteractive={false}>\r\n      <ControlButton onClick={this.deleteSelectedElement}> <strong> D </strong>\r\n      </ControlButton>\r\n      <ControlButton onClick={this.clearCanvas}> <strong> W </strong>\r\n      </ControlButton>\r\n    </Controls>\r\n        </ReactFlow>\r\n      </div>\r\n  \r\n      )\r\n    }\r\n  \r\n  }\r\n  // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n  // connection between your component and the Streamlit app, and handles\r\n  // passing arguments from Python -> Component.\r\n  //\r\n  // You don't need to edit withStreamlitConnection (but you're welcome to!).\r\n  export default withStreamlitConnection(SL_ReactFlow)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}