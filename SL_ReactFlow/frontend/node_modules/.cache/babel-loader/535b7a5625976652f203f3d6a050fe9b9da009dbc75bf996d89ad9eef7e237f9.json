{"ast":null,"code":"var _jsxFileName = \"h:\\\\streamlit_mindmap\\\\component-template\\\\template\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport ReactFlow, { Controls, Background, MiniMap, applyEdgeChanges, applyNodeChanges } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport MultiPurposeNode from './MultiPurposeNode'; // Import the custom node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  multiPurposeNode: MultiPurposeNode\n};\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      nodes: [\n      // Initialize with a default node or leave empty if not needed\n      {\n        id: '1',\n        type: 'multiPurposeNode',\n        position: {\n          x: 250,\n          y: 5\n        },\n        data: {\n          label: 'Initial Node'\n        }\n      }],\n      edges: [],\n      lastNumClicks: 0\n    };\n    this.addEdge = (sourceId, targetId) => {\n      const newEdge = {\n        id: `e-${this.state.edges.length + 1}`,\n        source: sourceId,\n        target: targetId\n        // Add additional properties as needed\n      };\n      this.setState(prevState => ({\n        edges: [...prevState.edges, newEdge]\n      }));\n    };\n    this.onConnect = params => {\n      const newEdge = {\n        id: `e${this.state.edges.length}`,\n        ...params\n      };\n      this.setState(prevState => ({\n        edges: [...prevState.edges, newEdge]\n      }));\n    };\n    this.onNodesChange = changes => {\n      this.setState(state => ({\n        nodes: applyNodeChanges(changes, state.nodes) // Type assertion here\n      }));\n    };\n    this.onEdgesChange = changes => {\n      this.setState(state => ({\n        edges: applyEdgeChanges(changes, state.edges)\n      }));\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n\n      const name = this.props.args[\"name\"];\n      const {\n        numClicks\n      } = this.props.args;\n      const {\n        lastNumClicks\n      } = this.state;\n      const flowStyles = {\n        \"width\": '100%',\n        \"height\": 500\n      };\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      if (numClicks !== lastNumClicks) {\n        this.setState({\n          lastNumClicks: numClicks\n        }); // Update lastNumClicks in state\n        this.addNode(this.props.args[\"label\"] || `Node ${this.state.nodes.length + 1}`);\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 1000,\n          width: 1000\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodeTypes: nodeTypes,\n          nodes: this.state.nodes,\n          edges: this.state.edges,\n          onNodesChange: this.onNodesChange,\n          onEdgesChange: this.onEdgesChange,\n          onConnect: this.onConnect,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n            nodeStrokeWidth: 3,\n            zoomable: true,\n            pannable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this);\n    };\n    this.onConnect = this.onConnect.bind(this);\n  }\n  addNode(label) {\n    // Define a new node with the CustomNode structure\n    const newNode = {\n      id: `node-${this.state.nodes.length + 1}`,\n      // Assuming 'multiPurposeNode' is a valid type in your setup\n      type: 'multiPurposeNode',\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label\n      }\n    };\n\n    // Update the state in a type-safe manner\n    this.setState(prevState => ({\n      nodes: [...prevState.nodes, newNode]\n    }));\n  }\n}\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","ReactFlow","Controls","Background","MiniMap","applyEdgeChanges","applyNodeChanges","MultiPurposeNode","jsxDEV","_jsxDEV","nodeTypes","multiPurposeNode","MyComponent","constructor","props","state","numClicks","isFocused","nodes","id","type","position","x","y","data","label","edges","lastNumClicks","addEdge","sourceId","targetId","newEdge","length","source","target","setState","prevState","onConnect","params","onNodesChange","changes","onEdgesChange","render","name","args","flowStyles","theme","style","borderStyling","primaryColor","border","outline","addNode","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","fitView","nodeStrokeWidth","zoomable","pannable","bind","newNode","Math","random","_c","$RefreshReg$"],"sources":["h:/streamlit_mindmap/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode ,useState,useCallback,useMemo} from \"react\"\r\nimport ReactFlow, { Controls, Background ,MiniMap, Edge,applyEdgeChanges, applyNodeChanges,Node} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\nimport MultiPurposeNode from './MultiPurposeNode'; // Import the custom node\r\n\r\n\r\nconst nodeTypes = { multiPurposeNode: MultiPurposeNode };\r\ninterface NodeData {\r\n  label: string;\r\n}\r\ninterface MultiPurposeNode {\r\n  id: string;\r\n  type: 'multiPurposeNode'; // Specify the type explicitly if you have a finite set of node types.\r\n  position: { x: number; y: number };\r\n  data: NodeData;\r\n}\r\n\r\ninterface State {\r\n  numClicks: number;\r\n  isFocused: boolean;\r\n  nodes: MultiPurposeNode[]; // Adding nodes to the state\r\n  edges: Edge[]; // Adding edges to the state  \r\n  lastNumClicks : number;\r\n}\r\n\r\n\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase<State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.onConnect = this.onConnect.bind(this);\r\n  }\r\n  public state : State = { numClicks: 0, \r\n                isFocused: false,\r\n                nodes: [\r\n                  // Initialize with a default node or leave empty if not needed\r\n                  {\r\n                    id: '1',\r\n                    type: 'multiPurposeNode',\r\n                    position: { x: 250, y: 5 },\r\n                    data: { label: 'Initial Node' },\r\n                  },\r\n                  \r\n                ],\r\n                edges: [],\r\n                lastNumClicks: 0,\r\n              }; \r\n    addNode(label: string) {\r\n                // Define a new node with the CustomNode structure\r\n                const newNode: MultiPurposeNode = {\r\n                  id: `node-${this.state.nodes.length + 1}`,\r\n                  // Assuming 'multiPurposeNode' is a valid type in your setup\r\n                  type: 'multiPurposeNode',\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                  data: { label },\r\n                };\r\n              \r\n                // Update the state in a type-safe manner\r\n                this.setState(prevState => ({\r\n                  nodes: [...prevState.nodes, newNode],\r\n                }));\r\n              }\r\n              \r\n  addEdge = (sourceId: string, targetId: string) => {\r\n                const newEdge: Edge = {\r\n                  id: `e-${this.state.edges.length + 1}`,\r\n                  source: sourceId,\r\n                  target: targetId,\r\n                  // Add additional properties as needed\r\n                };\r\n              \r\n                this.setState(prevState => ({\r\n                  edges: [...prevState.edges, newEdge],\r\n                }));\r\n              }\r\n              onConnect = (params:any) => {\r\n                const newEdge = { id: `e${this.state.edges.length}`, ...params };\r\n                this.setState(prevState => ({\r\n                  edges: [...prevState.edges, newEdge],\r\n                }));\r\n              }\r\n                   \r\n  onNodesChange = (changes:any) => {\r\n                this.setState((state) => ({\r\n                  nodes: applyNodeChanges(changes, state.nodes) as MultiPurposeNode[], // Type assertion here\r\n                }));\r\n    \r\n              }\r\n  onEdgesChange = (changes:any) => {\r\n                this.setState((state) => ({\r\n                  edges: applyEdgeChanges(changes, state.edges),\r\n                }));\r\n              }\r\n              \r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    \r\n    const name = this.props.args[\"name\"]\r\n    const { numClicks } = this.props.args;\r\n    const { lastNumClicks } = this.state;\r\n    const flowStyles = {\"width\": '100%', \"height\": 500}\r\n    \r\n\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n    \r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n    if (numClicks !== lastNumClicks) {\r\n      this.setState({ lastNumClicks: numClicks }); // Update lastNumClicks in state\r\n      this.addNode(this.props.args[\"label\"] || `Node ${this.state.nodes.length + 1}`);\r\n    }\r\n    \r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <div style={{ height: 1000 ,width : 1000}}>\r\n        <h3> {name} </h3>\r\n      <ReactFlow \r\n      nodeTypes={nodeTypes}\r\n      nodes={this.state.nodes}\r\n      edges={this.state.edges}\r\n      onNodesChange={this.onNodesChange}\r\n      onEdgesChange={this.onEdgesChange}\r\n      onConnect={this.onConnect}\r\n      fitView>\r\n       <MiniMap nodeStrokeWidth={3} zoomable pannable />\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </div>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}