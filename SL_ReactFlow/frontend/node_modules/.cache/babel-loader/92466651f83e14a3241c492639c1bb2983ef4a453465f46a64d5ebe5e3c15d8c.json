{"ast":null,"code":"var _jsxFileName = \"H:\\\\streamlit_mindmap\\\\component-template\\\\template\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport ReactFlow, { Controls, Background, MiniMap, Node } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      nodes: [\n      // Initialize with a default node or leave empty if not needed\n      {\n        id: '1',\n        position: {\n          x: 250,\n          y: 5\n        },\n        data: {\n          label: 'Initial Node'\n        }\n      }]\n    };\n    this.numClicks = this.state.numClicks;\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n\n      const name = this.props.args[\"name\"];\n      const nodes = [{\n        id: '1',\n        type: 'input',\n        // Optional: specify the type of the node (default is used if not specified)\n        position: {\n          x: 100,\n          y: 100\n        },\n        data: {\n          label: 'Node 1'\n        } // Required: 'data' object containing node-specific data\n      }];\n      const flowStyles = {\n        \"width\": '100%',\n        \"height\": 500\n      };\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 1000,\n          width: 1000\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n            nodeStrokeWidth: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  addNode(label) {\n    const newNode = {\n      id: `node-${this.state.nodes.length + 1}`,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label\n      }\n    };\n    this.setState(prevState => ({\n      nodes: [...prevState.nodes, newNode]\n    }));\n  }\n  componentDidUpdate(prevProps) {\n    // Assuming you receive numClicks and a label from props\n    if (this.props.args['numClicks'] !== prevProps.numClicks) {\n      this.addNode(this.props.args[\"label\"] || 'Node ${this.state.nodes.length + 1}');\n    }\n  }\n}\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","ReactFlow","Controls","Background","MiniMap","Node","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","numClicks","isFocused","nodes","id","position","x","y","data","label","render","name","props","type","flowStyles","theme","style","borderStyling","primaryColor","border","outline","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","nodeStrokeWidth","addNode","newNode","length","Math","random","setState","prevState","componentDidUpdate","prevProps","_c","$RefreshReg$"],"sources":["H:/streamlit_mindmap/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode ,useState } from \"react\"\r\nimport ReactFlow, { Controls, Background ,MiniMap,Node } from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\ninterface Node {\r\n  id: string;\r\n  type?: string;\r\n  position: { x: number; y: number };\r\n  data: { label: string };\r\n}\r\n\r\ninterface State {\r\n  numClicks: number;\r\n  isFocused: boolean;\r\n  nodes: Node[]; // Adding nodes to the state\r\n}\r\n\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase<State> {\r\n\r\n  public state : State = { numClicks: 0, \r\n                isFocused: false,\r\n                nodes: [\r\n                  // Initialize with a default node or leave empty if not needed\r\n                  {\r\n                    id: '1',\r\n                    position: { x: 250, y: 5 },\r\n                    data: { label: 'Initial Node' },\r\n                  },\r\n                ],\r\n              }; \r\n  addNode(label: string) {\r\n                const newNode: Node = {\r\n                  id: `node-${this.state.nodes.length + 1}`,\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                  data: { label },\r\n                };\r\n              \r\n                this.setState(prevState => ({\r\n                  nodes: [...prevState.nodes, newNode],\r\n                }));\r\n              }\r\n  numClicks = this.state.numClicks;\r\n\r\n  componentDidUpdate(prevProps: any) {\r\n                // Assuming you receive numClicks and a label from props\r\n                if (this.props.args['numClicks'] !== prevProps.numClicks) {\r\n                  this.addNode(this.props.args[\"label\"] || 'Node ${this.state.nodes.length + 1}');\r\n                }\r\n              }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    \r\n    const name = this.props.args[\"name\"]\r\n    const nodes = [\r\n      {\r\n        id: '1',\r\n        type: 'input', // Optional: specify the type of the node (default is used if not specified)\r\n        position: { x: 100, y: 100 },\r\n        data: { label: 'Node 1' }, // Required: 'data' object containing node-specific data\r\n      },\r\n    ];\r\n    const flowStyles = {\"width\": '100%', \"height\": 500}\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <div style={{ height: 1000 ,width : 1000}}>\r\n        <h3> {name} </h3>\r\n      <ReactFlow nodes={nodes}>\r\n      <MiniMap nodeStrokeWidth={3} />\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </div>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}