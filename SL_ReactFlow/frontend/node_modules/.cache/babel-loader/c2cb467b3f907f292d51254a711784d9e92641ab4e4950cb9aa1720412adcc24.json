{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import ReactFlow,{Controls,Background,MiniMap,applyEdgeChanges,applyNodeChanges,ConnectionMode,ControlButton}from'reactflow';import'reactflow/dist/style.css';import MultiPurposeNode from'./MultiPurposeNode';// Import the custom node\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";const nodeTypes={multiPurposeNode:MultiPurposeNode};/**\r\n   * This is a React-based component template. The `render()` function is called\r\n   * automatically when your component should be re-rendered.\r\n   */class SL_ReactFlow extends StreamlitComponentBase{constructor(props){super(props);this.onNodeClick=(_,node)=>{this.setState({selectedNodeId:node.id});};this.onEdgeClick=(_,edge)=>{this.setState({selectedEdgeId:edge.id});};this.state={numClicks:0,isFocused:false,nodes:[],edges:[],lastNumClicks:0,selectedNodeId:null,selectedEdgeId:null};this.addEdge=(sourceId,targetId)=>{const newEdge={id:\"e-\".concat(this.state.edges.length+1),source:sourceId,target:targetId// Add additional properties as needed\n};this.setState(prevState=>({edges:[...prevState.edges,newEdge]}));};this.onConnect=params=>{this.setState(prevState=>({edges:[...prevState.edges,{id:\"e\".concat(prevState.edges.length),...params}]}));};this.onNodesChange=changes=>{this.setState(state=>({nodes:applyNodeChanges(changes,state.nodes)// Type assertion here\n}));};this.onEdgesChange=changes=>{this.setState(state=>({edges:applyEdgeChanges(changes,state.edges)}));};this.deleteSelectedNode=()=>{this.setState(prevState=>({nodes:prevState.nodes.filter(n=>n.id!==this.state.selectedNodeId),edges:prevState.edges.filter(e=>e.source!==this.state.selectedNodeId&&e.target!==this.state.selectedNodeId),selectedNodeId:null// Reset selectedNodeId to null or handle as needed\n}));};this.deleteSelectedEdge=()=>{if(!this.state.selectedEdgeId)return;this.setState(prevState=>({edges:prevState.edges.filter(edge=>edge.id!==prevState.selectedEdgeId),selectedEdgeId:null// Reset selected edge ID\n}));};this.deleteSelectedElement=()=>{if(this.state.selectedNodeId){this.setState(prevState=>({nodes:prevState.nodes.filter(node=>node.id!==prevState.selectedNodeId),edges:prevState.edges.filter(e=>e.source!==this.state.selectedNodeId&&e.target!==this.state.selectedNodeId),selectedNodeId:null// Reset selected node ID\n}));}else if(this.state.selectedEdgeId){this.setState(prevState=>({edges:prevState.edges.filter(edge=>edge.id!==prevState.selectedEdgeId),selectedEdgeId:null// Reset selected edge ID\n}));}};this.clearCanvas=()=>{this.setState({nodes:[],edges:[]});};this.saveCanvas=()=>{Streamlit.setComponentValue({nodes:this.state.nodes,edges:this.state.edges});};this.render=()=>{// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nconst name=this.props.args[\"name\"];const{numClicks}=this.props.args;const{lastNumClicks}=this.state;// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nconst{theme}=this.props;const style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nconst borderStyling=\"1px solid \".concat(this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}if(numClicks!==lastNumClicks){this.setState({lastNumClicks:numClicks});// Update lastNumClicks in state\nthis.addNode(this.props.args[\"label\"]||\"Node \".concat(this.state.nodes.length+1));}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/_jsxs(\"div\",{style:{height:1000,width:'100vw'},children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\" \",name,\" \"]}),/*#__PURE__*/_jsxs(ReactFlow,{connectionMode:ConnectionMode.Loose,nodeTypes:nodeTypes,nodes:this.state.nodes,edges:this.state.edges,onNodesChange:this.onNodesChange,onEdgesChange:this.onEdgesChange,onNodeClick:this.onNodeClick,onEdgeClick:this.onEdgeClick,onConnect:this.onConnect,fitView:true,children:[/*#__PURE__*/_jsx(MiniMap,{nodeStrokeWidth:3,zoomable:true,pannable:true,position:\"bottom-right\"}),/*#__PURE__*/_jsx(Background,{}),/*#__PURE__*/_jsxs(Controls,{showInteractive:false,children:[/*#__PURE__*/_jsxs(ControlButton,{onClick:this.deleteSelectedElement,children:[\" \",/*#__PURE__*/_jsx(\"strong\",{children:\" D \"})]}),/*#__PURE__*/_jsxs(ControlButton,{onClick:this.clearCanvas,children:[\" \",/*#__PURE__*/_jsx(\"strong\",{children:\" W \"})]}),/*#__PURE__*/_jsxs(ControlButton,{onClick:this.saveCanvas,children:[\" \",/*#__PURE__*/_jsx(\"strong\",{children:\" S \"})]})]})]})]});};this.onConnect=this.onConnect.bind(this);this.onNodeClick=this.onNodeClick.bind(this);this.onEdgeClick=this.onEdgeClick.bind(this);this.deleteSelectedNode=this.deleteSelectedNode.bind(this);this.deleteSelectedEdge=this.deleteSelectedEdge.bind(this);this.deleteSelectedElement=this.deleteSelectedElement.bind(this);}addNode(label){// Define a new node with the CustomNode structure\nconst newNode={id:\"node-\".concat(this.state.nodes.length+1),// Assuming 'multiPurposeNode' is a valid type in your setup\ntype:'multiPurposeNode',position:{x:Math.random()*250,y:Math.random()*250},data:{label}};// Update the state in a type-safe manner\nthis.setState(prevState=>({nodes:[...prevState.nodes,newNode]}));}}// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(SL_ReactFlow);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","ReactFlow","Controls","Background","MiniMap","applyEdgeChanges","applyNodeChanges","ConnectionMode","ControlButton","MultiPurposeNode","jsxs","_jsxs","jsx","_jsx","nodeTypes","multiPurposeNode","SL_ReactFlow","constructor","props","onNodeClick","_","node","setState","selectedNodeId","id","onEdgeClick","edge","selectedEdgeId","state","numClicks","isFocused","nodes","edges","lastNumClicks","addEdge","sourceId","targetId","newEdge","concat","length","source","target","prevState","onConnect","params","onNodesChange","changes","onEdgesChange","deleteSelectedNode","filter","n","e","deleteSelectedEdge","deleteSelectedElement","clearCanvas","saveCanvas","setComponentValue","render","name","args","theme","style","borderStyling","primaryColor","border","outline","addNode","height","width","children","connectionMode","Loose","fitView","nodeStrokeWidth","zoomable","pannable","position","showInteractive","onClick","bind","label","newNode","type","x","Math","random","y","data"],"sources":["H:/streamlit_mindmap/build/SL_ReactFlow/frontend/src/SL_ReactFlow.tsx"],"sourcesContent":["import {\r\n    Streamlit,\r\n    StreamlitComponentBase,\r\n    withStreamlitConnection,\r\n  } from \"streamlit-component-lib\"\r\n  import React, { ReactNode } from \"react\"\r\n  import ReactFlow, { Controls, Background ,MiniMap, Edge,applyEdgeChanges, applyNodeChanges,ConnectionMode,ControlButton} from 'reactflow';\r\n  import 'reactflow/dist/style.css';\r\n  import MultiPurposeNode from './MultiPurposeNode'; // Import the custom node\r\n  \r\n  \r\n  const nodeTypes = { multiPurposeNode: MultiPurposeNode };\r\n  interface NodeData {\r\n    label: string;\r\n  }\r\n  interface MultiPurposeNode {\r\n    id: string;\r\n    type: 'multiPurposeNode'; // Specify the type explicitly if you have a finite set of node types.\r\n    position: { x: number; y: number };\r\n    data: NodeData;\r\n  }\r\n  \r\n  interface State {\r\n    numClicks: number;\r\n    isFocused: boolean;\r\n    nodes: MultiPurposeNode[]; // Adding nodes to the state\r\n    edges: Edge[]; // Adding edges to the state  \r\n    lastNumClicks : number;\r\n    selectedNodeId: string | null; // Track the selected node\r\n    selectedEdgeId: string | null; // Track the selected edge\r\n  }\r\n  \r\n  \r\n  \r\n  /**\r\n   * This is a React-based component template. The `render()` function is called\r\n   * automatically when your component should be re-rendered.\r\n   */\r\n  class SL_ReactFlow extends StreamlitComponentBase<State> {\r\n  \r\n    constructor(props: any) {\r\n      super(props);\r\n      this.onConnect = this.onConnect.bind(this);\r\n      this.onNodeClick = this.onNodeClick.bind(this);\r\n      this.onEdgeClick = this.onEdgeClick.bind(this);\r\n      this.deleteSelectedNode = this.deleteSelectedNode.bind(this);\r\n      this.deleteSelectedEdge = this.deleteSelectedEdge.bind(this);\r\n      this.deleteSelectedElement = this.deleteSelectedElement.bind(this);\r\n  \r\n    }\r\n    onNodeClick = (_:React.MouseEvent, node:any) => {\r\n      this.setState({ selectedNodeId: node.id });\r\n    }\r\n    onEdgeClick = (_:React.MouseEvent, edge:Edge) => {\r\n      this.setState({ selectedEdgeId: edge.id });\r\n    }\r\n    public state : State = { numClicks: 0, \r\n                  isFocused: false,\r\n                  nodes: [],\r\n                  edges: [],\r\n                  lastNumClicks: 0,\r\n                  selectedNodeId: null,\r\n                  selectedEdgeId: null,\r\n                }; \r\n    addNode(label: string) {\r\n                  // Define a new node with the CustomNode structure\r\n                  const newNode: MultiPurposeNode = {\r\n                    id: `node-${this.state.nodes.length + 1}`,\r\n                    // Assuming 'multiPurposeNode' is a valid type in your setup\r\n                    type: 'multiPurposeNode',\r\n                    position: { x: Math.random() * 250, y: Math.random() * 250   },\r\n                    data: { label },\r\n                  };\r\n                \r\n                  // Update the state in a type-safe manner\r\n                  this.setState(prevState => ({\r\n                    nodes: [...prevState.nodes, newNode],\r\n                  }));\r\n                  \r\n                }\r\n                \r\n    addEdge = (sourceId: string, targetId: string) => {\r\n                  const newEdge: Edge = {\r\n                    id: `e-${this.state.edges.length + 1}`,\r\n                    source: sourceId,\r\n                    target: targetId,\r\n                    // Add additional properties as needed\r\n                  };\r\n                \r\n                  this.setState(prevState => ({\r\n                    edges: [...prevState.edges, newEdge],\r\n                  }));\r\n                }\r\n    onConnect = (params:any) => {\r\n                  this.setState(prevState => ({\r\n                    edges: [...prevState.edges, { id: `e${prevState.edges.length}`, ...params }],\r\n                  }));\r\n                }\r\n                     \r\n    onNodesChange = (changes:any) => {\r\n                  this.setState((state) => ({\r\n                    nodes: applyNodeChanges(changes, state.nodes) as MultiPurposeNode[], // Type assertion here\r\n                  }));\r\n      \r\n                }\r\n    onEdgesChange = (changes:any) => {\r\n                  this.setState((state) => ({\r\n                    edges: applyEdgeChanges(changes, state.edges),\r\n                  }));\r\n                }\r\n    deleteSelectedNode = () => {\r\n                  this.setState(prevState => ({\r\n                    nodes: prevState.nodes.filter(n => n.id !== this.state.selectedNodeId),\r\n                    edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\r\n                    selectedNodeId: null,\r\n                    // Reset selectedNodeId to null or handle as needed\r\n                  }));\r\n                }\r\n    deleteSelectedEdge = () => {\r\n                  if (!this.state.selectedEdgeId) return;\r\n                \r\n                  this.setState(prevState => ({\r\n                    edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\r\n                    selectedEdgeId: null, // Reset selected edge ID\r\n                  }));\r\n                }\r\n                \r\n    deleteSelectedElement = () => {\r\n                  if (this.state.selectedNodeId) {\r\n                    this.setState(prevState => ({\r\n                      nodes: prevState.nodes.filter(node => node.id !== prevState.selectedNodeId),\r\n                      edges: prevState.edges.filter(e => e.source !== this.state.selectedNodeId && e.target !== this.state.selectedNodeId),\r\n                      selectedNodeId: null, // Reset selected node ID\r\n                    }));\r\n                  } else if (this.state.selectedEdgeId) {\r\n                    this.setState(prevState => ({\r\n                      edges: prevState.edges.filter(edge => edge.id !== prevState.selectedEdgeId),\r\n                      selectedEdgeId: null, // Reset selected edge ID\r\n                    }));\r\n                  }\r\n                }\r\n    clearCanvas = () => {\r\n                  this.setState({ nodes: [], edges: [] });\r\n                }\r\n    saveCanvas = () => {\r\n        Streamlit.setComponentValue({ nodes: this.state.nodes, edges: this.state.edges });\r\n\r\n                }        \r\n    public render = (): ReactNode => {\r\n      // Arguments that are passed to the plugin in Python are accessible\r\n      // via `this.props.args`. Here, we access the \"name\" arg.\r\n      \r\n      const name = this.props.args[\"name\"]\r\n      const { numClicks } = this.props.args;\r\n      const { lastNumClicks } = this.state;\r\n      \r\n  \r\n  \r\n      // Streamlit sends us a theme object via props that we can use to ensure\r\n      // that our component has visuals that match the active theme in a\r\n      // streamlit app.\r\n      const { theme } = this.props\r\n      const style: React.CSSProperties = {}\r\n      \r\n  \r\n      // Maintain compatibility with older versions of Streamlit that don't send\r\n      // a theme object.\r\n      if (theme) {\r\n        // Use the theme object to style our button border. Alternatively, the\r\n        // theme style is defined in CSS vars.\r\n        const borderStyling = `1px solid ${\r\n          this.state.isFocused ? theme.primaryColor : \"gray\"\r\n        }`\r\n        style.border = borderStyling\r\n        style.outline = borderStyling\r\n      }\r\n      if (numClicks !== lastNumClicks) {\r\n        this.setState({ lastNumClicks: numClicks }); // Update lastNumClicks in state\r\n        this.addNode(this.props.args[\"label\"] || `Node ${this.state.nodes.length + 1}`);\r\n      }\r\n      \r\n      // Show a button and some text.\r\n      // When the button is clicked, we'll increment our \"numClicks\" state\r\n      // variable, and send its new value back to Streamlit, where it'll\r\n      // be available to the Python program.\r\n      \r\n      return (\r\n        <div style={{ height: 1000 ,width : '100vw'}}>\r\n          <h3> {name} </h3>\r\n        <ReactFlow \r\n        connectionMode={ConnectionMode.Loose}\r\n        nodeTypes={nodeTypes}\r\n        nodes={this.state.nodes}\r\n        edges={this.state.edges}\r\n        onNodesChange={this.onNodesChange}\r\n        onEdgesChange={this.onEdgesChange}\r\n        onNodeClick={this.onNodeClick}\r\n        onEdgeClick={this.onEdgeClick}\r\n        onConnect={this.onConnect}\r\n        \r\n        fitView>\r\n         <MiniMap nodeStrokeWidth={3} zoomable pannable  position = \"bottom-right\"/>\r\n          <Background />\r\n          <Controls showInteractive={false}>\r\n      <ControlButton onClick={this.deleteSelectedElement}> <strong> D </strong>\r\n      </ControlButton>\r\n      <ControlButton onClick={this.clearCanvas}> <strong> W </strong>\r\n      </ControlButton>\r\n      <ControlButton onClick={this.saveCanvas}> <strong> S </strong>\r\n      </ControlButton>\r\n    </Controls>\r\n        </ReactFlow>\r\n      </div>\r\n  \r\n      )\r\n    }\r\n  \r\n  }\r\n  // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n  // connection between your component and the Streamlit app, and handles\r\n  // passing arguments from Python -> Component.\r\n  //\r\n  // You don't need to edit withStreamlitConnection (but you're welcome to!).\r\n  export default withStreamlitConnection(SL_ReactFlow)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}