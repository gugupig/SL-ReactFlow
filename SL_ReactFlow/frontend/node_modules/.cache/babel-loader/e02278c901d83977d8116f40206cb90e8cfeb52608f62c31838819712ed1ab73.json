{"ast":null,"code":"var _jsxFileName = \"H:\\\\streamlit_mindmap\\\\component-template\\\\template\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport ReactFlow, { Controls, Background } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n          children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","ReactFlow","Controls","Background","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","isFocused","render","name","props","theme","style","borderStyling","primaryColor","border","outline","height","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["H:/streamlit_mindmap/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport ReactFlow, { Controls, Background } from 'reactflow';\r\n \r\nimport 'reactflow/dist/style.css'\r\n\r\ninterface State {\r\n  isFocused: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase<State> {\r\n  public state = { isFocused: false }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const name = this.props.args[\"name\"]\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <div style={{ height: '100%' }}>\r\n        <h3> {name} </h3>\r\n      <ReactFlow>\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":";AAAA,SAEEA,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AACxC,OAAOC,SAAS,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,WAAW;AAE3D,OAAO,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMjC;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASR,sBAAsB,CAAQ;EAAAS,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC/CC,KAAK,GAAG;MAAEC,SAAS,EAAE;IAAM,CAAC;IAAA,KAE5BC,MAAM,GAAG,MAAiB;MAC/B;MACA;MACA,MAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,MAAM,CAAC;;MAEpC;MACA;MACA;MACA,MAAM;QAAEM;MAAM,CAAC,GAAG,IAAI,CAACD,KAAK;MAC5B,MAAME,KAA0B,GAAG,CAAC,CAAC;;MAErC;MACA;MACA,IAAID,KAAK,EAAE;QACT;QACA;QACA,MAAME,aAAa,GAAI,aACrB,IAAI,CAACP,KAAK,CAACC,SAAS,GAAGI,KAAK,CAACG,YAAY,GAAG,MAC7C,EAAC;QACFF,KAAK,CAACG,MAAM,GAAGF,aAAa;QAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;MAC/B;;MAEA;MACA;MACA;MACA;MACA,oBACEX,OAAA;QAAKU,KAAK,EAAE;UAAEK,MAAM,EAAE;QAAO,CAAE;QAAAC,QAAA,gBAC7BhB,OAAA;UAAAgB,QAAA,GAAI,GAAC,EAACT,IAAI,EAAC,GAAC;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBpB,OAAA,CAACJ,SAAS;UAAAoB,QAAA,gBACRhB,OAAA,CAACF,UAAU;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACdpB,OAAA,CAACH,QAAQ;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAEV,CAAC;EAAA;AAGH;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAAC,EAAA,GAAe3B,uBAAuB,CAACO,WAAW,CAAC;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}